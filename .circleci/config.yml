version: 2
jobs:
  build:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.2.x-backstop
      - image: selenium/standalone-chrome-debug:3.6.0
      - image: kporras07/lighthouse-ci:nonheadless
      - image: mariadb:5.5
        environment:
          MYSQL_DATABASE: drupal
          MYSQL_ROOT_PASSWORD: drupal
    working_directory: /var/www/retopais
    steps:
      - run: apt-get update -y && apt-get install python unzip -y
      - run: echo 127.0.0.1 retopais.local | tee -a /etc/hosts
      - checkout
      - restore_cache:
          keys:
            - npm-cache-{{ checksum "package.json" }}
            - composer-cache-{{ checksum "composer.lock" }}
      - run: npm install
      - save_cache:
         key: npm-cache-{{ checksum "package.json" }}
         paths:
           - node_modules
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
            composer install
      - run:
          name: Configure Nginx
          command: |
            cp ./.circleci/retopais /etc/nginx/sites-available/default
      - run:
          name: Build site.
          command: |
            # Hack drush.
            mv /usr/local/bin/drush /usr/local/bin/drush_launcher
            ln -s /var/www/retopais/.vendor/bin/drush /usr/local/bin/drush
            alias drush=drush --root=/var/www/html/build
            cp ./.circleci/settings.secret.php ./settings/
            composer install
            ./node_modules/.bin/aquifer build
            chmod 777 -R ./build/sites/default/files
            ./node_modules/.bin/aquifer extensions-load
            cd build
            /usr/bin/env PHP_OPTIONS="-d sendmail_path=`which true`" drush si -y retopais
            drush cc drush
            drush master-set-current-scope local
            drush master-execute -y
            drush cc all
            cd /var/www/retopais
      - run:
          name: Coding Standards Linters
          command: |
            ./node_modules/.bin/gulp phplint
            ./node_modules/.bin/gulp drupalcs
            ./node_modules/.bin/gulp eslint
      - store_artifacts:
          path: /tmp/lighthouse
          destination: lighthouse
      - persist_to_workspace:
          root: /var/www/
          paths: retopais

  deploy:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.2.x
    working_directory: /var/www/retopais
    steps:
      - attach_workspace:
          at: /var/www
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
      - add_ssh_keys:
      - run:
          name: Install and login terminus
          command: |
            mkdir terminus && cd terminus
            curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install
            ln -s /var/www/retopais/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
      - run:
          name: Deploy
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            terminus connection:set  retopais.dev git
            ./node_modules/.bin/aquifer deploy-git -m "Auto deploy triggered from master branch"
            terminus connection:set  retopais.dev sftp
            terminus drush retopais.dev -- si retopais --account-pass=admin -y
            terminus connection:set  retopais.dev git
            terminus drush retopais.dev -- config-set "system.site" uuid "$SITE_UUID" -y
            terminus drush retopais.dev -- cim -y
            terminus drush retopais.dev -- cr
  deploy-test:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.2.x
    working_directory: /var/www/retopais
    steps:
      - run:
          name: Install and login terminus
          command: |
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            mkdir terminus && cd terminus
            curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install
            ln -s /var/www/retopais/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
            terminus env:deploy retopais.test --note "Autodeploy from Circle" -y
            terminus drush retopais.test -- updb -y
            terminus drush retopais.test -- cim -y
            terminus drush retopais.test -- cr
  deploy-live:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.2.x
    working_directory: /var/www/retopais
    steps:
      - run:
          name: Install and login terminus
          command: |
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            mkdir terminus && cd terminus
            curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install
            ln -s /var/www/retopais/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
            terminus env:deploy retopais.live --note "Autodeploy from Circle" -y
            terminus drush retopais.live -- updb -y
            terminus drush retopais.live -- cim -y
            terminus drush retopais.live -- cr

  deploy-multidev:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.2.x
    working_directory: /var/www/retopais
    steps:
      - attach_workspace:
          at: /var/www
      - run: apt-get update -y && apt-get install python unzip -y
      - run:
          name: Install Composer and terminus
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
            mkdir $HOME/terminus && cd $HOME/terminus
            curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install
            ln -s $HOME/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
            cd /var/www/retopais
            composer install
      - add_ssh_keys:
      - run:
          name: Create multidev environment
          command: |
            NEWBRANCH=$CIRCLE_BRANCH
            LENGTH=${#NEWBRANCH}
            if [ LENGTH > 10 ] ; then NEWBRANCH=${NEWBRANCH:8:9} ; fi
            NEWBRANCH=${NEWBRANCH//-/}
            NEWBRANCH=${NEWBRANCH,,}
            terminus multidev:create retopais.live $NEWBRANCH || true
      - run:
          name: Deploy
          command: |
            NEWBRANCH=$CIRCLE_BRANCH
            LENGTH=${#NEWBRANCH}
            if [ LENGTH > 10 ] ; then NEWBRANCH=${NEWBRANCH:8:9} ; fi
            NEWBRANCH=${NEWBRANCH//-/}
            NEWBRANCH=${NEWBRANCH,,}
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            # Hack drush.
            mv /usr/local/bin/drush /usr/local/bin/drush_launcher
            ln -s /var/www/retopais/.vendor/bin/drush /usr/local/bin/drush
            alias drush=drush --root=/var/www/html/build
            ./node_modules/.bin/aquifer deploy-git -m "Auto deploy triggered from $CIRCLE_BRANCH branch" -b $NEWBRANCH
      - run:
          name: Deploy commands
          command: |
            NEWBRANCH=$CIRCLE_BRANCH
            LENGTH=${#NEWBRANCH}
            if [ LENGTH > 10 ] ; then NEWBRANCH=${NEWBRANCH:8:9} ; fi
            NEWBRANCH=${NEWBRANCH//-/}
            NEWBRANCH=${NEWBRANCH,,}
            terminus drush retopais.$NEWBRANCH -- cr
            terminus drush retopais.$NEWBRANCH -- sqlsan -y
            terminus drush retopais.$NEWBRANCH -- updb -y
            terminus drush retopais.$NEWBRANCH -- cim -y
            terminus drush retopais.$NEWBRANCH -- cr
            terminus lock:enable retopais.$NEWBRANCH -- $PANTHEON_WEB_AUTH_USER $PANTHEON_WEB_AUTH_PASS
            echo "If everything worked, go to http://$NEWBRANCH-retopais.pantheonsite.io"
workflows:
  version: 2
  build-deploys:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-multidev-hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - /feature\/.*/
      - deploy-multidev:
          requires:
            - deploy-multidev-hold
      - deploy-test:
          requires:
            - deploy
      - deploy-live-hold:
          type: approval
          requires:
            - deploy-test
      - deploy-live:
          requires:
            - deploy-live-hold
